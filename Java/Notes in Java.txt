Command Line Argument:			

1) to print all command line arguments 
class prog1
{
public static void main(String[] args)
{
for(int i=0;i<args.length;i++)
System.out.println(args[i]);
}
}

run - java prog1 I Like Java
output ->
	I
	Like
	Java

2) to print summation and average of all command line arguments

class prog1
{
public static void main(String[] args)
{
float sum=0,avg;
for(int i=0;i<args.length;i++)
sum=sum+Float.valueOf(args[i]);
avg=sum/args.length;
System.out.println("Summation is "+sum);
System.out.println("Average is "+avg);
}
}

run -> java prog1 1 2 3 4 5 6 7 8 9 10
Output: Summation is 55.0
	Average is 5.5

3) to print the command line arguments in sorted manner (assume numbers)

class prog1
{
public static void main(String[] args)
{
int x[]=new int[args.length];
for(int i=0;i<args.length;i++)
x[i]=Integer.valueOf(args[i]);

for(int i=0;i<x.length;i++)
for(int j=i+1;j<x.length;j++)
if(x[i]>x[j])
{
int t=x[i];
x[i]=x[j];
x[j]=t;
}

for(int i=0;i<x.length;i++)
System.out.print(x[i]+" ");
}
}

Object Oriented Programming:
1) Classes and Objects(Encapsulation)
	Where data member and methods are wrapped in one unit.
Method:1-

import java.util.*;
class prog1
{
private int a,b,c;
public void read()
{
Scanner s=new Scanner(System.in);
a=s.nextInt();
b=s.nextInt();
}
public void add()
{
c=a+b;
System.out.println("Addition is "+c);
}
public static void main(String[] args)
{
prog1 p=new prog1();
p.read();
p.add();
}
}


Method :2-
import java.util.*;
class prog1
{
private String str;
public void read()
{
Scanner s=new Scanner(System.in);
System.out.println("Enter String");
str=s.nextLine();
}
public int returnupper()
{
int c=0;
for(int i=0;i<str.length();i++)
{
char y=str.charAt(i);
if(Character.isUpperCase(y))
c++;
}
return c;
}

public int returnlower()
{
int c=0;
for(int i=0;i<str.length();i++)
{
char y=str.charAt(i);
if(Character.isLowerCase(y))
c++;
}
return c;
}

public int returndigit()
{
int c=0;
for(int i=0;i<str.length();i++)
{
char y=str.charAt(i);
if(Character.isDigit(y))
c++;
}
return c;
}
}

class prog2
{
public static void main(String[] args)
{
prog1 p=new prog1();
p.read();
System.out.println("Upper "+p.returnupper());
System.out.println("Lower "+p.returnlower());
System.out.println("Digit "+p.returndigit());
}
}

for e.g:
import java.util.*;
class prog1
{
private int x[]=new int[10];
public void read()
{
Scanner s=new Scanner(System.in);
System.out.println("Enter 10 Nos");
for(int i=0;i<x.length;i++)
x[i]=s.nextInt();
}
public boolean exist(int y)
{
for(int i=0;i<x.length;i++)
{
if(x[i]==y)
return true;
}
return false;
}
public static void main(String[] args)
{
prog1 p=new prog1();
p.read();
if(p.exist(20))
System.out.println("Element Exist");
else
System.out.println("Element Not Exist");
}
}

for e.g: Design a class employee, having 
	data member
	int empno
	String empname
	float empsal
	Method
	void accept() - to read empno,empname and
			empsal
	void incr() - to incr the salary by 10%
	void disp() - to display all information

import java.util.*;
class emp
{
private int empno[]=new int();
private string[]=new string();
private float empsal[]=new float();
public void accept()
{
Scanner s=new Scanner(System.in);
System.out.println("Enter Empno:");
System.out.println("Enter Empname:");
System.out.println("Enter Empsalary:");
for(int i=0;i<x.length;i++)
empno[i]=s.nextInt();
empname[i]=s.nextLine();
empsal[i]=s.nextfloat();
}
public void incr(int a)
{
for(int i=0;i<x.length;i++)
{
if(sal<=x[i])
float=(sal)(++a)*10.0f;
}
}
public void display()
{
System.out.println("Empno"+empno);
System.out.println("Empname"+empname);
System.out.println("Empsalary"+empsal);
}
class emp1
{
public static void main(String[] args)
{
emp e=new emp();
e.accept();
e.incr();
e.display();
}
}

22/10/2019
Methods : They are collection of statements that when called gets executed and return the 
result.
		Methods
Instance Method		Static methods
Instance(object) Method= Methods that are called by the instance of the class is called 
instance method.
	Instance method gets physical location many times(number of objects created)
Static(class) Method= Methods that are called by class name is called class method. 
	Static methods gets physical location only once.

Passing Parameters:The parameters are passed according to call by value and call by 
reference tech.

Call by value:When by change in formal parameters the actual does not change it is called
call by value.
for e.g:
class prog1
{
public void read()
{
System.out.println("In Instance Method");
}
public static void disp()
{
System.out.println("In Static Method");
}
public static void main(String[] args)
{
prog1 p=new prog1();
p.read();
prog1.disp();
p.disp();
}
}

for e.g.
class prog1
{
public void read(int x,int y) // formal parameters
{
x=x-10;
y=y-10;
}
public static void main(String[] args)
{
prog1 p=new prog1();
int a=100,b=200;
p.read(a,b);// actual parameters
System.out.println(a+" "+b);
}
}

Call by reference(Passing Object):When by change in formal parameters the actual do get 
changed it is called call by ref.

import java.util.*;
class prog1
{
private int a;
public void read()
{
Scanner s=new Scanner(System.in);
a=s.nextInt();
}
public void change(prog1 obj) //formal
{
int t=a;
a=obj.a;
obj.a=t;
}
public void disp()
{
System.out.println(a);
}
public static void main(String[] args)
{
prog1 p1=new prog1();
prog1 p2=new prog1();
p1.read();
p2.read();
p1.change(p2);//actual
p1.disp();
p2.disp();
}
}

Interobject Connectivity:
import java.util.*;
class prog1
{
private int x;
public void read()
{
Scanner s=new Scanner(System.in);
x=s.nextInt();
}
public void add(prog1 obj1,prog1 obj2) //formal
{
int t=x+obj1.x+obj2.x;
System.out.println(t);
}
public static void main(String[] args)
{
prog1 p1=new prog1();
prog1 p2=new prog1();
prog1 p3=new prog1();
p1.read();
p2.read();
p3.read();
p1.add(p2,p3);//actual
}
.............                                                                               
...................
.....................         
.........................
............................
...............................
..................................
......................................
...........................................
.................................................
........................................................

04/11/2019

1) Method Overloading : When 2 or more methods with same name in a class it is called 
Method overloading.
There must be some difference between parameters:
1) Number of Parameter
2) Type of Parameter
3) Sequence of parameter

for e.g:
class prog1
{
public void add(int a,int b)
{
System.out.println("Addition is 2int:"+(a+b));
}
public void add(int a,int b,int c)
{
System.out.println("Addition is 3int:"+(a+b+c));
}
public void add(float a,float b)
{
System.out.println("Addition is 2float:"+(a+b));
}
public void add(char a,char b)
{
System.out.println("Addition is 2char:"+(a+b));
}
public void add(float a,int b)
{
System.out.println("Addition is float,int:"+(a+b));
}
public void add(int a,float b)
{
System.out.println("Addition is int,float:"+(a+b));
}
public static void main(String[] args)
{
prog1 p=new prog1();
p.add(43.5f,43);
p.add(43.5f,43.32f);
p.add(43,43);
p.add(4,3,5);
p.add(43,43.43f);
p.add('1','2');
}
}


2) Constructors:
They are special methods used to initialize the members of the class.
Features:
1) Same name that of class
2) no return type
3) called automatically when object is created by new keyword
4) classified as non parameterized and parameterized
for e.g:

class prog1
{
private int roll;
private String nm;
public prog1()
{
System.out.println("Non Paramaterized");
roll=1;
nm="Rahul";
}
public prog1(int x,String y)
{
System.out.println("Paramaterized");
roll=x;
nm=y;
}
public void disp()
{
System.out.println(roll+" "+nm);
}
public static void main(String[] args)
{
prog1 p=new prog1();
p.disp();
prog1 q=new prog1(2,"Sachin");
q.disp();

}
}


3) this keyword: It is used to distinquish the class member from local members.
"this is instance(object) of current class"


class prog1
{
private int roll;
private String nm;
public prog1(int roll,String nm)
{
this.roll=roll;
this.nm=nm;
}
public void disp()
{
System.out.println(roll+" "+nm);
}
public static void main(String[] args)
{
prog1 q=new prog1(2,"Sachin");
q.disp();
}
}

4) using static count how many objects of the class are created.

class prog1
{
private static int x;
public prog1()
{
x++;
}
public void disp()
{
System.out.println("Object are "+x);
}
public static void main(String[] args)
{
prog1 p1=new prog1();
prog1 p2=new prog1();
prog1 p3=new prog1();
p1.disp();
}
}


Ass:1Page no 340

class ShapesVolume
{
public static douable Volume(douable r)
{
Volume V=4/3*22/7*Math.pow(r,3);
return V;
}
public static douable Volume(douable h,douable r)
{
Volume V=22/7*r*r*h;
V.return(); 
}
public static douable Volume(douable l,douable b,douable h)
{
Volume V=l*b*h;
V.return();
}
}

5-11-2019

// Method Overriding : When 2 methods with same name one in base class and another in 
derived class then by derived class object always the derived class method gets executed. 
This is overriding of derived class over base class.

for e.g:
class prog1
{
public void disp()
{
System.out.println("In Prog1 Class");
}
}
class prog2 extends prog1
{
public void disp()
{
System.out.println("In Prog2 Class");
}
public static void main(String[] args)
{
prog2 p=new prog2();
p.disp();
}
}
output -> In Prog2 Class

// Abstract Class and Method :
Abstract class are those which cannot be used to create object we can only use them by means of inheritance.
Syntax:
	abstract class A
	{
	}
for e.g:
abstract class prog1
{
public int sqr(int x)
{
return x*x;
}
public abstract int cube(int x);
}
class prog2 extends prog1
{
public int cube(int x)
{
return x*x*x;
}
public static void main(String[] args)
{
prog2 p=new prog2();
System.out.println("Square is "+p.sqr(5));
System.out.println("Cube is "+p.cube(5));
}
}

abstract method are with body, they are only declared in abstract classs.They are defined 
in derived class.
// final class : A class that does not allow inheritance. To use them we need to create 
object of it.
Syntax:
	final class A
	{
	
	}
for e.g:

final class prog1
{
public int sqr(int x)
{
return x*x;
}
}
class prog2
{
public int cube(int x)
{
return x*x*x;
}
public static void main(String[] args)
{
prog1 q=new prog1();
prog2 p=new prog2();
System.out.println("Square is "+q.sqr(5));
System.out.println("Cube is "+p.cube(5));
}
}

06/11/2019

1) Role Of Constructor in Inheritance:
The base constructor gets called automatically from derived class constructor. To pass
parameteres we need super() which is a method written on first line of derived class
constructor.

class prog1
{
protected int roll;
public prog1()
{
System.out.println("Base Class Non Parameterized");
roll=1;
}
public prog1(int x)
{
System.out.println("Base Class Parameterized");
roll=x;
}
}
class prog2 extends prog1
{
private String nm;
public prog2()
{
System.out.println("Derived Class Non Parameterized");
nm="Rahul Dravid";
}
public prog2(int x,String y)
{
super(x);
System.out.println("Derived Class Parameterized");
nm=y;
}
public void disp()
{
System.out.println(roll+" "+nm);
}
public static void main(String[] args)
{
prog2 p=new prog2();
p.disp();
prog2 q=new prog2(100,"Sachin Tendulkar");
q.disp();
}
}
/*
Base Class Non Parameterized
Derived Class Non Parameterized
1 Rahul Dravid
Base Class Parameterized
Derived Class Parameterized
100 Sachin Tendulkar
*/

2) super as an object -
super as an object is used to point base class members being in derived class.

class prog1
{
public void disp()
{
System.out.println("In Prog1 Base Class");
}
}
class prog2 extends prog1
{
public void disp()
{
System.out.println("In Prog2 Derived Class");
}
public void show()
{
super.disp();
}
public static void main(String[] args)
{
prog2 p=new prog2();
p.show();
}
}


3) Interface : It is collection of methods and constants, where methods are only declared.
Syntax:
	interface <name>
	{
	//body
	}
for e.g:
interface A
{
float pi=3.14f;
float area(float r);
float circum(float r);
}
class prog2 implements A
{
public float area(float r)
{
return pi*r*r;
}
public float circum(float r)
{
return 2*pi*r;
}
public static void main(String[] args)
{
prog2 p=new prog2();
System.out.println(p.area(5.5f));
System.out.println(p.circum(5.3f));
}
}

Rules:
1) It is not possible to create object of interface
2) All methods declared in interface must be defined in the class.
3) All members are static,public and constant
4) It is possible to have multiple inheritance using interface.
syntax:
	interface A
	{
	}
	interface B
	{
	}
	class prog2 implements A,B
	{
	}
or
	interface A
	{
	}
	interface B
	{
	}
	interface C extends A,B
	{
	}
	class prog2 implements C
	{
	}
for e.g:
interface A1
{
float pi=3.14f;
float area(float r);
}
interface A2
{
float circum(float r);
}
class prog2 implements A1,A2
{
public float area(float r)
{
return pi*r*r;
}
public float circum(float r)
{
return 2*pi*r;
}
public static void main(String[] args)
{
prog2 p=new prog2();
System.out.println(p.area(5.5f));
System.out.println(p.circum(5.3f));
}
}

7/11/19

Packages: They are collection of classes,interfaces and fields.
There are many built in packages: java.util,java.lang(default),java.awt,java.io,java.net,
java.sql,javax.swing,javax.servlet,etc.
	To Use package we have import statement:
for e.g:
	import java.util.*;
which means all classes inside util are know accessible to the code.
we can also change the import statement as :
	import java.util.Scanner;
know we can only use Scanner class in the code.
	Without import statement we can access the class by using fully quailified name -
	java.util.Scanner s=new java.util.Scanner(System.in)

User Defined Package:
1) Create a folder in c:\program files\java\jdk1.6.0\bin
for e.g:
	c:\program ..\java\jdk1.6.0\bin>md batch7
2) Type following codes and save in batch7
for e.g:
package batch7;
public class nick
{
public int cube(int x)
{
return x*x*x;
}
}
3) compile the package:
	c:\program files.....\bin>cd batch7
	c:\program files....\bin\batch7>path=c:\program files..
	c:\program files....\bin\batch7>javac *.java
4) Using the package:
	Type the following code and save in bin folder(not in batch7)
import batch7.*;
class demo1
{
public static void main(String[] args)
{
tanmay p=new tanmay();
nick q=new nick();
System.out.println(p.sqr(5));
System.out.println(q.cube(5));
}
}

Exceptions(Errors)-
	Errors are those which are not required in code and the compiler or interpreter
stop the program from further running.
Types of error:
1) Logical Error : When the programmer make mistake in logic for e.g: to find largest of 
2 number and we write following statement then we get wrong output -
		if(a<b)
		System.out.println("Largest "+a);
		else
		System.out.println("Largest "+b);

2) Syntax Error : When the programmer makes mistake in the syntax of the code:
	for e.g:
	itn x;		in place of int x;
	float x		in place of float x;
3) Exception(Runtime Error):Errors occur at runtime are called exceptions.
	for e.g:
	int x=100,y=0,z;
	z=x/y;
We need to handle the exceptions for that we have :
1) try .. catch block
2) finally block
3) throws statement
4) throw statement

1) try ... catch block : All statement that may create problem are merged in try block and the action to be taken are in catch block.
	Syntax:
	try
	{
	//statements
	}
	catch(Exceptionclass obj)
	{
	//statements
	} 

for e.g:

class demo1
{
public static void main(String[] args)
{
int a,b,c;
try
{
a=Integer.parseInt(args[0]);
b=Integer.parseInt(args[1]);
c=a/b;
System.out.println(c);
}
catch(NumberFormatException obj)
{
System.out.println("Problem in Conversion");
}
catch(ArithmeticException obj)
{
System.out.println("Problem in Division");
}
catch(ArrayIndexOutOfBoundsException obj)
{
System.out.println("Problem in Array Size");
}
System.out.println("Main Ends");
}
}

It is possible to use single catch block for any kind of exceptions
for e.g:
class demo1
{
public static void main(String[] args)
{
int a,b,c;
try
{
a=Integer.parseInt(args[0]);
b=Integer.parseInt(args[1]);
c=a/b;
System.out.println(c);
}
catch(Exception obj)
{
System.out.println("Problem "+obj);
}
System.out.println("Main Ends");
}
}

8/11/19

1)finally block - It is executing in both case i.e when exeception occurs and when exception 
does not occur.
	Syntax:
	try
	{
	}
	catch(Exceptionclass obj)
	{
	}
	finally
	{
	}
or
	try
	{
	}
	finally
	{
	}


class prog1
{
public static void main(String[] args)
{
int x[]=new int[3];
try
{
x[100]=200;
}
finally
{
System.out.println("I Will Execute In Any Case");
}

}
}

2) throws keyword: It is used to divert the exception object from any method to main()
method.
for e.g:
class prog1
{
public void divme(String x,String y) throws NumberFormatException,ArithmeticException
{
int a=Integer.parseInt(x);
int b=Integer.parseInt(y);
int c=a/b;
System.out.println("Div "+c);
}
public static void main(String[] args)
{
prog1 p=new prog1();
try
{
p.divme("100","20");
p.divme("10","0");
}
catch(Exception ee)
{
System.out.println("Problem "+ee);
}
System.out.println("Main Ends");
}
}
3) throw keyword: It is used to call exception on demand.
for e.g:
class prog1
{
public static void main(String[] args)
{
try
{
ArithmeticException obj=new ArithmeticException("Exception for fun");
throw obj;
}
catch(ArithmeticException ee)
{
System.out.println("Problem "+ee);
}
System.out.println("Main Ends");
}
}



Applets:
	They are small code of java that get executed in browser.
Method -1
a) Type the code of applet, save and compile
import java.awt.*;
import java.applet.*;
public class app1 extends Applet
{
public void paint(Graphics g)
{
g.drawString("Welcome to Applet programming",100,100);
}
}
b) Create HTML File:save it by xxx.html in same location.
<html>
<body>
<h1> This Is Demo Of Applet </h1>
<applet height=600 width=600 code=app1></applet>
</body>
</html>
c) open internet explorer and browse the html file

Method -2
a) type the code,save and compiler -
import java.awt.*;
import java.applet.*;
public class app1 extends Applet
{
public void paint(Graphics g)
{
Font f=new Font("Courier",Font.BOLD,28);
g.setFont(f);
g.setColor(Color.red);
g.drawString("Sahil Wagh",100,50);
f=new Font("Arial",Font.BOLD,20);
g.setFont(f);
g.setColor(Color.green);
g.drawString("Sahil Wada, Sahil Nagar",100,75);
g.drawString("Sahil-663636 ",100,100);
}
}
/*<applet height=600 width=600 code=app1></applet>*/ 
b) to run type:
appletviewer app1.java

09/11/2019
// Graphics on Applet
import java.awt.*;
import java.applet.*;
public class app1 extends Applet
{
public void paint(Graphics g)
{
g.drawLine(50,50,150,50);
g.drawLine(160,50,160,150);
g.drawRect(170,50,120,70);
g.drawRoundRect(300,50,100,60,15,15);
g.drawOval(410,50,100,100);
g.drawArc(520,50,100,100,90,180);

g.setColor(Color.blue);
g.fillRect(170,250,120,70);
g.fillRoundRect(300,250,100,60,15,15);
g.setColor(Color.red);
g.fillOval(410,250,100,100);
g.fillArc(520,250,100,100,90,180);
}
}
/*<applet height=600 width=600 code=app1></applet>*/

// to draw concentric 10 circles in different color
import java.awt.*;
import java.applet.*;
public class app2 extends Applet
{
public void paint(Graphics g)
{
int x=50,w=500;
for(int i=1;i<=10;i++)
{
int r1=(int)(Math.random()*34343%256);
int r2=(int)(Math.random()*14343%256);
int r3=(int)(Math.random()*64343%256);
Color c=new Color(r1,r2,r3);
g.setColor(c);
g.fillOval(x,x,w,w);
g.setColor(Color.black);
g.drawOval(x,x,w,w);
x=x+20;
w=w-40;
}
}
}
/*<applet height=600 width=600 code=app2></applet>*/

// to draw pie chart
import java.awt.*;
import java.applet.*;
public class app3 extends Applet
{
public void paint(Graphics g)
{
int x[]={0,34,56,78,101,146,178,230,270,310,330,360};
for(int i=0;i<x.length-1;i++)
{
int r1=(int)(Math.random()*34343%256);
int r2=(int)(Math.random()*14343%256);
int r3=(int)(Math.random()*64343%256);
Color c=new Color(r1,r2,r3);
g.setColor(c);
g.fillArc(50,50,500,500,x[i],(x[i+1]-x[i]));
}
}
}
/*<applet height=600 width=600 code=app3></applet>*/

// to draw 100 Circles
import java.awt.*;
import java.applet.*;
public class app5 extends Applet
{
public void paint(Graphics g)
{
g.drawLine(50,50,50,550);
g.drawLine(50,550,550,550);
g.setColor(Color.red);
g.fillRect(100,300,40,250);

g.setColor(Color.green);
g.fillRect(200,450,40,100);

g.setColor(Color.cyan);
g.fillRect(300,100,40,450);

}
}
/*<applet height=600 width=600 code=app5></applet>*/

11/11/2019

// Awt Controls On Applet
import java.awt.*;
import java.applet.*;
public class awt1 extends Applet
{
Label l1;
TextField t1,t2;
TextArea ta1;
Checkbox c1,c2,c3,c4;
Choice ch;
Button b1;
Scrollbar s1;
public void init()
{
l1=new Label("Enter Roll");//text
t1=new TextField(20);
t2=new TextField(20);//size
ta1=new TextArea(4,30);//rows,cols
c1=new Checkbox("Married");
c2=new Checkbox("Employeed");
CheckboxGroup cg=new CheckboxGroup();
c3=new Checkbox("Male",cg,true);
c4=new Checkbox("Female",cg,true);
ch=new Choice();
ch.addItem("Apple");
ch.addItem("Mango");
b1=new Button("Submit");
s1=new Scrollbar(Scrollbar.VERTICAL,10,10,1,100);
add(l1);
add(t1);
add(t2);
add(ta1);
add(c1);
add(c2);
add(c3);
add(c4);
add(ch);
add(b1);
add(s1);
}
}
/*<applet height=600 width=600 code=awt1></applet>*/

/* 
Event Handling:
1) ActionListener(Button,textfield,menuitem)
*/
import java.awt.*;
import java.applet.*;
import java.awt.event.*;
public class awt2 extends Applet implements ActionListener
{
TextField t1,t2;
Button b1;
public void init()
{
t1=new TextField(20);
t2=new TextField(20);//size
b1=new Button("NegPos");
b1.addActionListener(this);
add(t1);
add(t2);
add(b1);
}
public void actionPerformed(ActionEvent tt)
{
int x=Integer.parseInt(t1.getText());
if(x>=0)
t2.setText("Positive");
else
t2.setText("Negative");
}
}
/*<applet height=600 width=600 code=awt2></applet>*/


import java.awt.*;
import java.applet.*;
import java.awt.event.*;
public class evenodd extends Applet implements ActionListener
{
TextField t1,t2;
Button b1;
public void init()
{
t1=new TextField(20);
t2=new TextField(20);//size
b1=new Button("Even OR Odd");
b1.addActionListener(this);
add(t1);
add(t2);
add(b1);
}
public void actionPerformed(ActionEvent tt)
{
int x=Integer.parseInt(t1.getText());
if(x%2==0)
t2.setText("Even");
else
t2.setText("Odd");
}
}
/*<applet height=600 width=600 code=evenodd></applet>*/


import java.awt.*;
import java.applet.*;
import java.awt.event.*;
public class evenodd extends Applet implements ActionListener
{
TextField t1,t2;
Button b1;
public void init()
{
t1=new TextField(20);
t2=new TextField(20);//size
b1=new Button("Even OR Odd");
b1.addActionListener(this);
add(t1);
add(t2);
add(b1);
}
public void actionPerformed(ActionEvent tt)
{
int x=Integer.parseInt(t1.getText());
if(x%2==0)
t2.setText("Even");
else
t2.setText("Odd");
}
}
/*<applet height=600 width=600 code=evenodd></applet>*/

// Arithmetic Calc
import java.awt.*;
import java.applet.*;
import java.awt.event.*;
public class evenodd extends Applet implements ActionListener 
{
	TextField t1,t2,t3;
	Button b1,b2,b3,b4;
	public void init()
	{	
	t1=new TextField(20);				
	t2=new TextField(20);
	t3=new TextField(20);
 	b1=new Button("Add");
 	b2=new Button("Sub");
 	b3=new Button("Mul");
 	b4=new Button("Div");
	b1.addActionListener(this);
	b2.addActionListener(this);
	b3.addActionListener(this);
	b4.addActionListener(this);
	add(t1);
	add(t2);
	add(t3);
	add(b1);
	add(b2);
	add(b3);
	add(b4);
}
public void actionPerformed(ActionEvent tt)
{
double x=Double.parseDouble(t1.getText());
double y=Double.parseDouble(t2.getText());
double z=0;
if(tt.getSource()==b1)
z=x+y;
else
if(tt.getSource()==b2)
z=x-y;
else
if(tt.getSource()==b3)
z=x*y;
else
z=x/y;
t3.setText(z+"");
}
}
/*<applet height=600 width=600 code=evenodd></applet>*/

/*
ItemListener : Checkbox,Choice

To change the background color using radiobutton
*/
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
public class prog1 extends Applet implements ItemListener
{
Checkbox c1,c2,c3;
public void init()
{
CheckboxGroup cg=new CheckboxGroup();
c1=new Checkbox("Red",cg,false);
c2=new Checkbox("Green",cg,false);
c3=new Checkbox("Blue",cg,false);
c1.addItemListener(this);
c2.addItemListener(this);
c3.addItemListener(this);
add(c1);
add(c2);
add(c3);
}
public void itemStateChanged(ItemEvent tt)
{
if(c1.getState()==true)
setBackground(Color.red);
else
if(c2.getState()==true)
setBackground(Color.green);
else
setBackground(Color.blue);
}
}
/*<applet height=600 width=600 code=prog1></applet>*/

/*
ItemListener : Checkbox,Choice

To change the background color using Choice
*/
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
public class prog2 extends Applet implements ItemListener
{
Choice ch;
public void init()
{
ch=new Choice();
ch.addItem("Red");
ch.addItem("Green");
ch.addItem("Blue");
ch.addItemListener(this);
add(ch);
}
public void itemStateChanged(ItemEvent tt)
{
switch(ch.getSelectedIndex())
{
case 0:setBackground(Color.red);break;
case 1:setBackground(Color.green);break;
case 2:setBackground(Color.blue);break;
}
}
}
/*<applet height=600 width=600 code=prog2></applet>*/

import java.awt.*;
import java.awt.event.*;
import java.applet.*;
public class prog3 extends Applet implements ItemListener
{
Checkbox c1,c2,c3,c4,c5;
TextField t1;
int sum=0;
public void init()
{
c1=new Checkbox("a=5");
c2=new Checkbox("b=10");
c3=new Checkbox("c=20");
c4=new Checkbox("d=50");
c5=new Checkbox("e=100");
t1=new TextField(20);
c1.addItemListener(this);
c2.addItemListener(this);
c3.addItemListener(this);
c4.addItemListener(this);
c5.addItemListener(this);
add(c1);
add(c2);
add(c3);
add(c4);
add(c5);
add(t1);
}
public void itemStateChanged(ItemEvent tt)
{
sum=0;
if(c1.getState()==true)
sum=sum+5;
if(c2.getState()==true)
sum=sum+10;
if(c3.getState()==true)
sum=sum+20;
if(c4.getState()==true)
sum=sum+50;
if(c5.getState()==true)
sum=sum+100;
t1.setText(sum+"");
}
}
/*<applet height=600 width=600 code=prog3></applet>*/

// AdjustmentListener - Scrollbar
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
public class prog4 extends Applet implements AdjustmentListener
{
Scrollbar s1,s2,s3;
public void init()
{
s1=new Scrollbar(Scrollbar.VERTICAL,2,2,1,256);
s2=new Scrollbar(Scrollbar.VERTICAL,2,2,1,256);
s3=new Scrollbar(Scrollbar.VERTICAL,2,2,1,256);
s1.addAdjustmentListener(this);
s2.addAdjustmentListener(this);
s3.addAdjustmentListener(this);
add(s1);
add(s2);
add(s3);
}
public void adjustmentValueChanged(AdjustmentEvent tt)
{
Color cc=new Color(s1.getValue(),s2.getValue(),s3.getValue());
setBackground(cc);
}
}
/*<applet height=600 width=600 code=prog4></applet>*/

// AdjustmentListener - Scrollbar
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
public class size extends Applet implements AdjustmentListener
{
Scrollbar s1;
TextField t1;
public void init()
{
s1=new Scrollbar(Scrollbar.VERTICAL,4,4,2,256);
s1.addAdjustmentListener(this);
t1=new TextField(20);
add(s1);
add(t1);
}
public void adjustmentValueChanged(AdjustmentEvent tt)
{
............................................
}
}
/*<applet height=600 width=600 code=prog4></applet>*/

// MouseListener - to click on applet and display "Java" on it.
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
public class prog5 extends Applet implements MouseListener
{
public void init()
{
addMouseListener(this);
}
public void mousePressed(MouseEvent tt){
Graphics g=getGraphics();
g.drawString("Java",tt.getX(),tt.getY());
}
public void mouseReleased(MouseEvent tt){}
public void mouseClicked(MouseEvent tt){}
public void mouseEntered(MouseEvent tt){}
public void mouseExited(MouseEvent tt){}
}
/*<applet height=600 width=600 code=prog5></applet>*/

// MouseMotionListener - to draw circle as we move mouse on applet
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
public class prog6 extends Applet implements MouseMotionListener
{
public void init()
{
addMouseMotionListener(this);
}
public void mouseMoved(MouseEvent tt){
Graphics g=getGraphics();
int r1=(int)(Math.random()*32432%256);
int r2=(int)(Math.random()*32432%256);
int r3=(int)(Math.random()*32432%256);
Color c=new Color(r1,r2,r3);
g.setColor(c);
g.fillOval(tt.getX(),tt.getY(),40,40);
}
public void mouseDragged(MouseEvent tt){}
}
/*<applet height=600 width=600 code=prog6></applet>*/

// MouseListener and MouseMotionListener - to draw rectangle at run time
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
public class prog7 extends Applet implements MouseListener,MouseMotionListener
{
int x1,x2,y1,y2;
public void init()
{
addMouseListener(this);
addMouseMotionListener(this);
}
public void mousePressed(MouseEvent tt){
x1=tt.getX();
y1=tt.getY();
}
public void mouseReleased(MouseEvent tt){
Graphics g=getGraphics();
int x=(x1>x2)?x2:x1;
int y=(y1>y2)?y2:y1;
int w=(int)Math.abs(x1-x2);
int h=(int)Math.abs(y1-y2);
g.drawRect(x,y,w,h);
}
public void mouseMoved(MouseEvent tt){}
public void mouseClicked(MouseEvent tt){}
public void mouseEntered(MouseEvent tt){}
public void mouseExited(MouseEvent tt){}
public void mouseDragged(MouseEvent tt){
x2=tt.getX();
y2=tt.getY();
}
}
/*<applet height=600 width=600 code=prog7></applet>*/

// KeyListener- To Change the background color by pressing key
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
public class prog1 extends Applet implements KeyListener
{
public void init()
{
addKeyListener(this);
}
public void keyPressed(KeyEvent tt){
switch(tt.getKeyChar())
{
case 'p':setBackground(Color.pink);break;
case 'r':setBackground(Color.red);break;
case 'g':setBackground(Color.green);break;
case 'b':setBackground(Color.blue);break;
case 'c':setBackground(Color.cyan);break;
case 'w':setBackground(Color.white);break;
case 'y':setBackground(Color.yellow);break;
case 'o':setBackground(Color.orange);break;
default:setBackground(Color.black);
}
}
public void keyReleased(KeyEvent tt){}
public void keyTyped(KeyEvent tt){}
}
/*<applet height=600 width=600 code=prog1></applet>*/

// FocusListener- To find lenght of text typed in textfield1 and display in textfield2
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
public class prog2 extends Applet implements FocusListener
{
TextField t1,t2;
public void init()
{
t1=new TextField(20);
t2=new TextField(20);
t1.addFocusListener(this);
add(t1);
add(t2);
}
public void focusLost(FocusEvent tt){
t2.setText(t1.getText().length()+"");
}
public void focusGained(FocusEvent tt){}
}
/*<applet height=600 width=600 code=prog2></applet>*/

ADAPTER:-

Event Handling:
 Listener			Adapter
(Interface)		(class)
ActionListener		--
ItemListener		--
AdjustmentListener		--
MouseListener		MouseAdapter
MouseMotionListener	MouseMotionAdapter
KeyListener		KeyAdapter
FocusListener		FocusAdapter

Using Adapter Classes:

// MouseAdapter - to click on applet and display "Java" on it.
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
public class ada1 extends Applet 
{
public void init()
{
addMouseListener(new demo());
}
class demo extends MouseAdapter
{
public void mousePressed(MouseEvent tt){
Graphics g=getGraphics();
g.drawString("Java",tt.getX(),tt.getY());
}
}
}
/*<applet height=600 width=600 code=ada1></applet>*/

// MouseMotionAdapter - to draw circle as we move mouse on applet
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
public class ada1 extends Applet 
{
public void init()
{
addMouseMotionListener(new demo());
}
class demo extends MouseMotionAdapter
{
public void mouseMoved(MouseEvent tt){
Graphics g=getGraphics();
int r1=(int)(Math.random()*32432%256);
int r2=(int)(Math.random()*32432%256);
int r3=(int)(Math.random()*32432%256);
Color c=new Color(r1,r2,r3);
g.setColor(c);
g.fillOval(tt.getX(),tt.getY(),40,40);
}
}
}
/*<applet height=600 width=600 code=ada1></applet>*/

// KeyAdapter- To Change the background color by pressing key
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
public class ada1 extends Applet
{
public void init()
{
addKeyListener(new KeyAdapter()
{
public void keyPressed(KeyEvent tt){
switch(tt.getKeyChar())
{
case 'p':setBackground(Color.pink);break;
case 'r':setBackground(Color.red);break;
case 'g':setBackground(Color.green);break;
case 'b':setBackground(Color.blue);break;
case 'c':setBackground(Color.cyan);break;
case 'w':setBackground(Color.white);break;
case 'y':setBackground(Color.yellow);break;
case 'o':setBackground(Color.orange);break;
default:setBackground(Color.black);
}}});
}
}
/*<applet height=600 width=600 code=ada1></applet>*/


// FocusAdapter- To find lenght of text typed in textfield1 and display in textfield2
import java.awt.*;
import java.awt.event.*;
import java.applet.*;
public class ad1 extends Applet 
{
TextField t1,t2;
public void init()
{
t1=new TextField(20);
t2=new TextField(20);
t1.addFocusListener(new demo());
add(t1);
add(t2);
}
class demo extends FocousAdapter
{
public void focusLost(FocusEvent tt){
t2.setText(t1.getText().length()+"");
}
}
/*<applet height=600 width=600 code=ad1></applet>*/

Layout:-

Layout Mgr: It decides how the controls are placed on the container(applet,frame,panel).
Their are :
1) FlowLayout
2) BorderLayout
3) GridLayout
4) CardLayout
5) GridBagLayout
Every Container do have a default layout manager.
Applet- FlowLayout
Frame - BorderLayout
Panel - FlowLayout

1) FlowLayout - Controls flow from one direction to another.

import java.awt.*;
import java.applet.*;
public class lay1 extends Applet
{
Button b1,b2,b3;
public void init()
{
b1=new Button("1st");
b2=new Button("2nd");
b3=new Button("3rd");
FlowLayout ff=new FlowLayout(FlowLayout.LEFT,10,10);
setLayout(ff);
add(b1);
add(b2);
add(b3);
}
}
/*<applet height=600 width=600 code=lay1></applet>*/

2) BorderLayout :Controls are arranged in 5 direction only(North,South,West,East and Center)

import java.awt.*;
import java.applet.*;
public class lay2 extends Applet
{
Button b1,b2,b3,b4,b5;
public void init()
{
b1=new Button("1st");
b2=new Button("2nd");
b3=new Button("3rd");
b4=new Button("4th");
b5=new Button("5th");
BorderLayout ff=new BorderLayout(10,10);
setLayout(ff);
add("North",b1);
add("East",b2);
add("West",b3);
add("South",b4);
add("Center",b5);
}
}
/*<applet height=600 width=600 code=lay2></applet>*/

3) GridLayout :Controls are arranged in rows and cols.

import java.awt.*;
import java.applet.*;
public class lay3 extends Applet
{
Button b[]=new Button[100];
public void init()
{
setBackground(Color.red);
GridLayout ff=new GridLayout(10,10,5,5);//row,col
setLayout(ff);
for(int i=0;i<b.length;i++)
{
b[i]=new Button("BT"+i);
add(b[i]);
}
}
}
/*<applet height=600 width=600 code=lay3></applet>*/

4) CardLayout :Same as playing cards where card are arranged one below another and one visible at a time.

//CardLayout
import java.awt.*;
import java.applet.*;
import java.awt.event.*;
public class lay4 extends Applet implements MouseListener
{
Panel p1,p2,p3;
CardLayout cd;
public void init()
{
cd=new CardLayout();
setLayout(cd);
p1=new Panel();
p2=new Panel();
p3=new Panel();
p1.setBackground(Color.red);
p2.setBackground(Color.green);
p3.setBackground(Color.blue);
p1.addMouseListener(this);
p2.addMouseListener(this);
p3.addMouseListener(this);
add(p1,"p1");
add(p2,"p2");
add(p3,"sdf");
}
public void mousePressed(MouseEvent tt){
cd.next(this);
}
public void mouseReleased(MouseEvent tt){}
public void mouseClicked(MouseEvent tt){}
public void mouseEntered(MouseEvent tt){}
public void mouseExited(MouseEvent tt){}
}
/*<applet height=600 width=600 code=lay4></applet>*/

5) GridBagLayout :Controls are arranged according to rows and cols but they can occupy more then 1 cell.

import java.awt.*;
import java.applet.*;
public class lay5 extends Applet 
{
Button b[]=new Button[17];
GridBagLayout gb;
GridBagConstraints gbc;
public void init()
{
gb=new GridBagLayout();
setLayout(gb);
gbc=new GridBagConstraints();
gbc.weightx=100;
gbc.weighty=100;
gbc.fill=GridBagConstraints.BOTH;
gbc.insets=new Insets(5,5,5,5);

for(int i=0;i<10;i++)
b[i]=new Button(i+"");

b[10]=new Button("NL");
b[11]=new Button("/");
b[12]=new Button("*");
b[13]=new Button("-");
b[14]=new Button("+");
b[15]=new Button("ET");
b[16]=new Button(".");

Font f=new Font("Courier",Font.BOLD,20);
for(int i=0;i<b.length;i++)
b[i].setFont(f);

for(int i=0;i<10;i++)
b[i].setBackground(Color.orange);
for(int i=10;i<b.length;i++)
b[i].setBackground(Color.cyan);

sahil(b[10],gbc,0,0,1,1);
sahil(b[11],gbc,1,0,1,1);
sahil(b[12],gbc,2,0,1,1);
sahil(b[13],gbc,3,0,1,1);

sahil(b[7],gbc,0,1,1,1);
sahil(b[8],gbc,1,1,1,1);
sahil(b[9],gbc,2,1,1,1);
sahil(b[14],gbc,3,1,1,2);

sahil(b[4],gbc,0,2,1,1);
sahil(b[5],gbc,1,2,1,1);
sahil(b[6],gbc,2,2,1,1);

sahil(b[1],gbc,0,3,1,1);
sahil(b[2],gbc,1,3,1,1);
sahil(b[3],gbc,2,3,1,1);
sahil(b[15],gbc,3,3,1,2);

sahil(b[0],gbc,0,4,2,1);
sahil(b[16],gbc,2,4,1,1);

}
void sahil(Button b,GridBagConstraints gbc1,int x,int y,int w,int h)
{
gbc1.gridx=x;
gbc1.gridy=y;
gbc1.gridwidth=w;
gbc1.gridheight=h;
add(b,gbc1);
}
}
/*<applet height=600 width=600 code=lay5></applet>*/


6) Adding Controls with layout manager.

import java.awt.*;
import java.applet.*;
public class lay6 extends Applet
{
Button b1,b2,b3;
public void init()
{
b1=new Button("1st");
b2=new Button("2nd");
b3=new Button("3rd");
setLayout(null);
b1.setBounds(0,0,100,25);
b2.setBounds(0,200,100,25);
b3.setBounds(0,400,100,25);
add(b1);
add(b2);
add(b3);
}
}
/*<applet height=600 width=600 code=lay6></applet>*/\

FRAME:-

Frame - Container  (same as applet) - it gives a gui that executed on operating
system rather on browser.

for e.g: to draw a frame

import java.awt.*;
import java.awt.event.*;
public class frm1 extends Frame implements WindowListener
{
public frm1()
{
addWindowListener(this);
setTitle("My Frame Title");
setSize(600,600);
setLocation(100,100);
setVisible(true);
}
public void windowActivated(WindowEvent tt){}
public void windowDeactivated(WindowEvent tt){}
public void windowIconified(WindowEvent tt){}
public void windowDeiconified(WindowEvent tt){}
public void windowOpened(WindowEvent tt){}
public void windowClosed(WindowEvent tt){}
public void windowClosing(WindowEvent tt){
dispose();
}

public static void main(String[] args)
{
frm1 p=new frm1();
}
}

// for e.g: Controls, Events on Frame
import java.awt.*;
import java.awt.event.*;
public class frm2 extends Frame implements ActionListener
{
TextField t1,t2,t3;
Button b1;
public frm2()
{
t1=new TextField(20);
t2=new TextField(20);
t3=new TextField(20);
b1=new Button("Add");
b1.addActionListener(this);
addWindowListener(new WindowAdapter(){
public void windowClosing(WindowEvent tt){
dispose();
}});
FlowLayout ff=new FlowLayout();
setLayout(ff);
add(t1);
add(t2);
add(t3);
add(b1);
setSize(600,600);
setVisible(true);
}
public void actionPerformed(ActionEvent tt){
int x1=Integer.parseInt(t1.getText());
int x2=Integer.parseInt(t2.getText());
int x3=x1+x2;
t3.setText(x3+"");
}
public static void main(String[] args)
{
frm2 p=new frm2();
}
}

// To Change the background color using 3 scrollbars
import java.awt.*;
import java.awt.event.*;
public class frm3 extends Frame implements AdjustmentListener
{
Scrollbar s1,s2,s3;
public frm3()
{
s1=new Scrollbar(Scrollbar.VERTICAL,10,10,1,255);
s2=new Scrollbar(Scrollbar.VERTICAL,10,10,1,255);
s3=new Scrollbar(Scrollbar.VERTICAL,10,10,1,255);
s1.addAdjustmentListener(this);
s2.addAdjustmentListener(this);
s3.addAdjustmentListener(this);
addWindowListener(new WindowAdapter(){
public void windowClosing(WindowEvent tt){
dispose();
}});
FlowLayout ff=new FlowLayout();
setLayout(ff);
add(s1);
add(s2);
add(s3);
setSize(600,600);
setVisible(true);
}
public void adjustmentValueChanged(AdjustmentEvent tt){
Color c=new Color(s1.getValue(),s2.getValue(),s3.getValue());
setBackground(c);
}
public static void main(String[] args)
{
frm3 p=new frm3();
}
}

// Using Graphics on Frame
import java.awt.*;
import java.awt.event.*;
public class frm4 extends Frame
{
public frm4()
{
addMouseMotionListener(new MouseMotionAdapter(){
public void mouseMoved(MouseEvent tt)
{
int r1=(int)(Math.random()*32432%256);
int r2=(int)(Math.random()*32432%256);
int r3=(int)(Math.random()*32432%256);
Color c=new Color(r1,r2,r3);
Graphics g=getGraphics();
g.setColor(c);
g.fillRect(tt.getX(),tt.getY(),30,30);
}});
addWindowListener(new WindowAdapter(){
public void windowClosing(WindowEvent tt){
dispose();
}});
setSize(600,600);
setVisible(true);
}
public static void main(String[] args)
{
frm4 p=new frm4();
}
}

//ActionListener Calculations

import java.awt.*;
import java.awt.event.*;
public class frm5 extends Frame implements ActionListener
{
	TextField t1,t2,t3;
	Button b1,b2,b3,b4;
           public frm5()
	{
	t1=new TextField(20);				
	t2=new TextField(20);
	t3=new TextField(20);
 	b1=new Button("Add");
 	b2=new Button("Sub");
 	b3=new Button("Mul");
 	b4=new Button("Div");
	b1.addActionListener(this);
	b2.addActionListener(this);
	b3.addActionListener(this);
	b4.addActionListener(this);
	FlowLayout ff=new FlowLayout();
	setLayout(ff);
	add(t1);
	add(t2);
	add(t3);
	add(b1);
	add(b2);
	add(b3);
	add(b4);
addWindowListener(new WindowAdapter(){
public void windowClosing(WindowEvent tt){
dispose();
}});
setSize(600,600);
setVisible(true);
}
public void actionPerformed(ActionEvent tt)
{
double x=Double.parseDouble(t1.getText());
double y=Double.parseDouble(t2.getText());
double z=0;
if(tt.getSource()==b1)
z=x+y;
else
if(tt.getSource()==b2)
z=x-y;
else
if(tt.getSource()==b3)
z=x*y;
else
z=x/y;
t3.setText(z+"");
}
public static void main(String[] args)
{
    frm5 p=new frm5();
}
}

MenuBar:-

// Menus On Frame
import java.awt.*;
import java.awt.event.*;
public class menu1 extends Frame implements ActionListener
{
MenuBar mb;
Menu m1,m2,m3;
MenuItem i1,i2,i3,i4,i5,i6,i7,i8;
public menu1()
{
mb=new MenuBar();
m1=new Menu("File");
m2=new Menu("Edit");
m3=new Menu("Format");
i1=new MenuItem("New");
i2=new MenuItem("Open");
i3=new MenuItem("Exit");
i3.addActionListener(this);
i4=new MenuItem("Cut");
i5=new MenuItem("Copy");
i6=new MenuItem("Paste");
i7=new MenuItem("Color");
i8=new MenuItem("Font");
m1.add(i1);
m1.add(i2);
m1.add(i3);

m2.add(i4);
m2.add(i5);
m2.add(i6);
m3.add(i7);
m3.add(i8);
mb.add(m1);
mb.add(m2);
mb.add(m3);
setMenuBar(mb);

addWindowListener(new WindowAdapter(){
public void windowClosing(WindowEvent tt){
dispose();
}});
setSize(800,700);
setVisible(true);
}
public void actionPerformed(ActionEvent tt)
{
dispose();
}
public static void main(String[] args)
{
new menu1();
}
}

// PopupMenu On Frame
import java.awt.*;
import java.awt.event.*;
public class menu2 extends Frame implements ActionListener,MouseListener
{
PopupMenu p1;
MenuItem i1,i2,i3;
public menu2()
{
p1=new PopupMenu();
i1=new MenuItem("Red");
i2=new MenuItem("Green");
i3=new MenuItem("Blue");

i3.addActionListener(this);
i1.addActionListener(this);
i2.addActionListener(this);

p1.add(i1);
p1.add(i2);
p1.add(i3);

add(p1);
addMouseListener(this);
addWindowListener(new WindowAdapter(){
public void windowClosing(WindowEvent tt){
dispose();
}});
setSize(800,700);
setVisible(true);
}
public void actionPerformed(ActionEvent tt)
{
if(tt.getSource()==i1)
setBackground(Color.red);
else
if(tt.getSource()==i2)
setBackground(Color.green);
else
setBackground(Color.blue);
}
public void mousePressed(MouseEvent tt){
if(tt.isMetaDown()==true)
p1.show(this,tt.getX(),tt.getY());
}
public void mouseReleased(MouseEvent tt){}
public void mouseClicked(MouseEvent tt){}
public void mouseEntered(MouseEvent tt){}
public void mouseExited(MouseEvent tt){}
		
public static void main(String[] args)
{
new menu2();
}
}

// Dialog Boxes On Frame
import java.awt.*;
import java.awt.event.*;
public class menu3 extends Frame implements ActionListener
{
Panel p1;
Button b1,b2;
public menu3()
{
p1=new Panel();
b1=new Button("Model");
b2=new Button("Modeless");
b1.addActionListener(this);
b2.addActionListener(this);
p1.add(b1);
p1.add(b2);
add("South",p1);
addWindowListener(new WindowAdapter(){
public void windowClosing(WindowEvent tt){
dispose();
}});
setSize(800,700);
setVisible(true);
}
public void actionPerformed(ActionEvent tt)
{
if(tt.getSource()==b1)
{
Dialog dd=new Dialog(this,"MyModelDialog",true);
dd.setSize(400,400);
dd.setVisible(true);
}
else
{
Dialog dd=new Dialog(this,"MyModelessDialog",false);
dd.setSize(400,400);
dd.setVisible(true);
}
}
public static void main(String[] args)
{
new menu3();
}
}

// PopupMenu On Frame
import java.awt.*;
import java.awt.event.*;
public class menu4 extends Frame implements AdjustmentAdapter
{
PopupMenu p1;
MenuItem i1,i2,i3;
public menu4()
{
p1=new PopupMenu();
i1=new MenuItem("Red");
i2=new MenuItem("Green");
i3=new MenuItem("Blue");

i3.addAdjustmentAdapter(this);
i1.addAdjustmentAdapter(this);
i2.addAdjustmentAdapter(this);
 
p1.add(i1);
p1.add(i2);
p1.add(i3);

add(p1);
addWindowListener(new WindowAdapter(){
public void windowClosing(WindowEvent tt){
dispose();
}});
setSize(800,700);
setVisible(true);
}
public void actionPerformed(ActionEvent tt)
{
if(tt.getSource()==i1)
setBackground(Color.red);
else
if(tt.getSource()==i2)
setBackground(Color.green);
else
setBackground(Color.blue);
}
public void mousePressed(MouseEvent tt){
if(tt.isMetaDown()==true)
p1.show(this,tt.getX(),tt.getY());
}
public static void main(String[] args)
{
new menu4();
}
}

Swing Controls
	They are light weigth controls designed by java.
for e.g: controls on Applet in swing
import java.awt.*;
import javax.swing.*;
public class swi2 extends JApplet
{
JButton b1;
JScrollBar s1,s2;
JSlider sd1,sd2;
JComboBox c1;
JList li1;
public void init()
{
Container d=getContentPane();
FlowLayout ff=new FlowLayout();
d.setLayout(ff);
b1=new JButton("Submit");
s1=new JScrollBar(JScrollBar.VERTICAL,10,10,1,200);
s2=new JScrollBar(JScrollBar.HORIZONTAL,10,10,1,200);
sd1=new JSlider(SwingConstants.VERTICAL,1,100,10);
sd2=new JSlider(SwingConstants.HORIZONTAL,1,100,10);
String x[]={"Apple","Mango","Pine","Orange","Papaya"};
c1=new JComboBox(x);
li1=new JList(x);
d.add(b1);
d.add(s1);
d.add(s2);
d.add(sd1);
d.add(sd2);
d.add(c1);
d.add(li1);
}
}
/*<applet height=600 width=600 code=swi2></applet>*/


for e.g: controls on Frame in swing

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class swi1 extends JFrame
{
JLabel l1,l2;
JTextField t1,t2;
JPasswordField p1;
JTextArea ta1;
JCheckBox c1,c2;
JRadioButton r1,r2;
public swi1()
{
Container d=getContentPane();
FlowLayout ff=new FlowLayout();
d.setLayout(ff);
l1=new JLabel("Enter No");
l2=new JLabel(new ImageIcon("a1.jpg"));
t1=new JTextField(20);
t2=new JTextField(20);
p1=new JPasswordField(20);
ta1=new JTextArea(3,40);
c1=new JCheckBox("Married");
c2=new JCheckBox("Employed");
r1=new JRadioButton("Male");
r2=new JRadioButton("Female");
ButtonGroup bg=new ButtonGroup();
bg.add(r1);
bg.add(r2);
d.add(l1);
d.add(l2);
d.add(t1);
d.add(t2);
d.add(p1);
d.add(ta1);
d.add(c1);
d.add(c2);
d.add(r1);
d.add(r2);
addWindowListener(new WindowAdapter(){
public void windowClosing(WindowEvent tt){
dispose();
}});
setSize(600,600);
setVisible(true);
}
public static void main(String[] args)
{
new swi1();
}
}

// Events on Swing Controls
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class swi1 extends JFrame implements ActionListener
{
JTextField t1,t2,t3;
JButton b1;
public swi1()
{
Container d=getContentPane();
FlowLayout ff=new FlowLayout();
d.setLayout(ff);
t1=new JTextField(20);
t2=new JTextField(20);
t3=new JTextField(20);
b1=new JButton("Add");
b1.addActionListener(this);
d.add(t1);
d.add(t2);
d.add(t3);
d.add(b1);
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
setSize(600,600);
setVisible(true);
}
public void actionPerformed(ActionEvent tt)
{
double a1=Double.parseDouble(t1.getText());
double a2=Double.parseDouble(t2.getText());
double a3=a1+a2;
t3.setText(a3+"");
}
public static void main(String[] args)
{
new swi1();
}
}

// Swing Controls on Applet
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
public class swi2 extends JApplet implements ChangeListener
{
JSlider sd1,sd2,sd3;
Container d=getContentPane();
public void init()
{
FlowLayout ff=new FlowLayout();
d.setLayout(ff);
sd1=new JSlider(SwingConstants.VERTICAL,1,255,10);
sd2=new JSlider(SwingConstants.VERTICAL,1,255,10);
sd3=new JSlider(SwingConstants.VERTICAL,1,255,10);
sd1.addChangeListener(this);
sd2.addChangeListener(this);
sd3.addChangeListener(this);
d.add(sd1);
d.add(sd2);
d.add(sd3);
}
public void stateChanged(ChangeEvent tt)
{
Color c=new Color(sd1.getValue(),sd2.getValue(),sd3.getValue());
d.setBackground(c);
}
}
/*<applet height=600 width=600 code=swi2></applet>*/

// to change the background color of applet using 3 radiobuttons
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class pandu1 extends JApplet implements ItemListener
{
JRadioButton r1,r2,r3;
Container d=getContentPane();
public void init()
{
FlowLayout ff=new FlowLayout();
d.setLayout(ff);
r1=new JRadioButton("Red");
r2=new JRadioButton("Green");
r3=new JRadioButton("Blue");
ButtonGroup bg=new ButtonGroup();
bg.add(r1);
bg.add(r2);
bg.add(r3);
r1.addItemListener(this);
r2.addItemListener(this);
r3.addItemListener(this);
d.add(r1);
d.add(r2);
d.add(r3);
}
public void itemStateChanged(ItemEvent tt)
{
if(r1.isSelected()==true)
d.setBackground(Color.red);
else
if(r2.isSelected()==true)
d.setBackground(Color.green);
else
d.setBackground(Color.blue);
}
}
/*<applet height=600 width=600 code=pandu1></applet>*/

// to Demonstrate scrollpane control
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class pandu2 extends JApplet
{
JTextArea ta1;
public void init()
{
ta1=new JTextArea(4,30);
Container d=getContentPane();
FlowLayout ff=new FlowLayout();
d.setLayout(ff);
JScrollPane jsp1=new JScrollPane(ta1);
d.add(jsp1);
}
}
/*<applet height=600 width=600 code=pandu2></applet>*/

// to Demonstrate Table control
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class pandu3 extends JApplet
{
JTable tb;
public void init()
{
Container d=getContentPane();
FlowLayout ff=new FlowLayout();
d.setLayout(ff);
String hd[]={"Rollno","NameofStudent","ClassofStudent","Fees"};
Object dt[][]={
	{"1","Mr. Amol Palekar","TYBCA","2000"},
	{"2","Mr. Anil Palekar","TYBCA","2000"},
	{"3","Mr. Alok Palekar","TYBCA","2000"},
	{"4","Mr. Atul Palekar","TYBCA","2000"},
	{"5","Mr. Aziz Palekar","TYBCA","2000"},
	{"6","Mr. Azim Palekar","TYBCA","2000"},
	{"7","Mr. Anuj Palekar","TYBCA","2000"}
	};
tb=new JTable(dt,hd);
JScrollPane jsp1=new JScrollPane(tb);
d.add(jsp1);
}
}
/*<applet height=600 width=600 code=pandu3></applet>*/

// to Demonstrate Tree control
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.tree.*;
public class pandu4 extends JApplet
{
JTree tr;
public void init()
{
Container d=getContentPane();
DefaultMutableTreeNode food=new DefaultMutableTreeNode("Food");

DefaultMutableTreeNode food1=new DefaultMutableTreeNode("VegFood");
DefaultMutableTreeNode food2=new DefaultMutableTreeNode("NonVegFood");
food.add(food1);
food.add(food2);

DefaultMutableTreeNode food11=new DefaultMutableTreeNode("BreakFast");
DefaultMutableTreeNode food12=new DefaultMutableTreeNode("Lunch");
DefaultMutableTreeNode food13=new DefaultMutableTreeNode("Dinner");
food1.add(food11);
food1.add(food12);
food1.add(food13);

DefaultMutableTreeNode food21=new DefaultMutableTreeNode("BreakFast");
DefaultMutableTreeNode food22=new DefaultMutableTreeNode("Lunch");
DefaultMutableTreeNode food23=new DefaultMutableTreeNode("Dinner");
food2.add(food21);
food2.add(food22);
food2.add(food23);

DefaultMutableTreeNode food111=new DefaultMutableTreeNode("Idli");
DefaultMutableTreeNode food112=new DefaultMutableTreeNode("Dosa");
food11.add(food111);
food11.add(food112);

DefaultMutableTreeNode food121=new DefaultMutableTreeNode("Sabji Roti");
DefaultMutableTreeNode food122=new DefaultMutableTreeNode("Dal Rice");
food12.add(food121);
food12.add(food122);

DefaultMutableTreeNode food131=new DefaultMutableTreeNode("Khicadi");
DefaultMutableTreeNode food132=new DefaultMutableTreeNode("Dal Bati");

food13.add(food131);
food13.add(food132);

DefaultMutableTreeNode food211=new DefaultMutableTreeNode("Eggs");
DefaultMutableTreeNode food212=new DefaultMutableTreeNode("ChickenLolipop");
food21.add(food211);
food21.add(food212);

DefaultMutableTreeNode food221=new DefaultMutableTreeNode("MuttenRice");
DefaultMutableTreeNode food222=new DefaultMutableTreeNode("Chiken Handi");
food22.add(food221);
food22.add(food222);


DefaultMutableTreeNode food331=new DefaultMutableTreeNode("Fish");
DefaultMutableTreeNode food332=new DefaultMutableTreeNode("Biryani");

food23.add(food331);
food23.add(food332);

tr=new JTree(food);
JScrollPane jsp1=new JScrollPane(tr);
d.add(jsp1);
}
}
/*<applet height=600 width=600 code=pandu4></applet>*/

// To Design Menus On Frame
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class pandu5 extends JFrame implements ActionListener
{
JMenuBar mb;
JMenu m1,m2,m3,m4;
JMenuItem i1,i2,i3,i4,i5,i6,i7,i8,i9,i10;
JRadioButtonMenuItem r1,r2;
JCheckBoxMenuItem c1,c2;
public pandu5()
{
mb=new JMenuBar();
m1=new JMenu("File");
m2=new JMenu("Edit");
m3=new JMenu("Format");
m4=new JMenu("Color");
m1.setMnemonic('F');//access key
m2.setMnemonic('E');
m3.setMnemonic('o');

i1=new JMenuItem("New");
i2=new JMenuItem("Open");
i3=new JMenuItem("Save");
i4=new JMenuItem("Exit");
i4.addActionListener(this);
i4.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,InputEvent.CTRL_MASK));
i5=new JMenuItem("Cut");
i6=new JMenuItem("Copy");
i7=new JMenuItem("Paste");
i8=new JMenuItem("Font");
i9=new JMenuItem("BackColor");
i10=new JMenuItem("ForeColor");
r1=new JRadioButtonMenuItem("LeftAlign");
r2=new JRadioButtonMenuItem("RightAlign");

c1=new JCheckBoxMenuItem("Bold");
c2=new JCheckBoxMenuItem("Italic");

m4.add(i9);
m4.add(i10);
m1.add(i1);
m1.add(i2);
m1.add(i3);
m1.addSeparator();
m1.add(i4);

m2.add(i5);
m2.add(i6);
m2.add(i7);

m3.add(i8);

m3.addSeparator();
m3.add(m4);//submenu
m3.addSeparator();

m3.add(r1);
m3.add(r2);
m3.add(c1);
m3.add(c2);

mb.add(m1);
mb.add(m2);
mb.add(m3);

setJMenuBar(mb);

setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
setSize(800,600);
setVisible(true);
}
public void actionPerformed(ActionEvent tt)
{
dispose();
}
public static void main(String[] args)
{
new pandu5();
}
}

// To implements Font Dialog Box
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class pandu6 extends JFrame implements ItemListener
{
JTextArea ta1;
JComboBox c1,c2;
JCheckBox ch1,ch2;
public pandu6()
{
Container d=getContentPane();
JPanel p1=new JPanel();
String x[]=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
c1=new JComboBox(x);
c2=new JComboBox();
for(int i=8;i<=72;i=i+2)
c2.addItem(i+"");
ch1=new JCheckBox("Bold");
ch2=new JCheckBox("Italic");
ta1=new JTextArea(20,80);
p1.add(c1);
p1.add(c2);
p1.add(ch1);
p1.add(ch2);
c1.addItemListener(this);
c2.addItemListener(this);
ch1.addItemListener(this);
ch2.addItemListener(this);
d.add("Center",ta1);
d.add("South",p1);
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
setSize(800,600);
setVisible(true);
}
public void itemStateChanged(ItemEvent tt)
{
String face=(String) c1.getSelectedItem();
int size=Integer.parseInt((String) c2.getSelectedItem());
int style=0;
if(ch1.isSelected())
style=style | Font.BOLD;
if(ch2.isSelected())
style=style | Font.ITALIC;
Font f=new Font(face,style,size);
ta1.setFont(f);
}
public static void main(String[] args)
{
new pandu6();
}
}

// To implements ProgressBar,Timer and Multi Frame communication Dialog box
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class pandu7 extends JFrame implements ActionListener
{
JLabel l1,l2;
JTextField t1;
JPasswordField p1;
JButton b1;
Timer t;
JProgressBar pb;
public pandu7()
{
Container d=getContentPane();
d.setLayout(null);
l1=new JLabel("User Name");
l2=new JLabel("Password ");
t1=new JTextField(20);
p1=new JPasswordField(20);
b1=new JButton("Submit");
pb=new JProgressBar();
pb.setMinimum(1);
pb.setMaximum(500);
pb.setBackground(Color.black);
pb.setForeground(Color.orange);
t=new Timer(10,new runme());
l1.setBounds(50,100,200,25);
t1.setBounds(250,100,200,25);

l2.setBounds(50,150,200,25);
p1.setBounds(250,150,200,25);

b1.setBounds(150,200,200,25);

pb.setBounds(0,250,500,25);
b1.addActionListener(this);
d.add(l1);
d.add(l2);
d.add(t1);
d.add(p1);
d.add(pb);
d.add(b1);

setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
setSize(500,300);
setVisible(true);
}
public void actionPerformed(ActionEvent tt)
{
t.start();
}
class runme implements ActionListener
{
int x=1;
public void actionPerformed(ActionEvent tt)
{
pb.setValue(x);
x=x+5;
if(x>500)
{
t.stop();
if(t1.getText().equals("Pandu") && p1.getText().equals("hello"))
new pandu8(t1.getText());
else
{
JOptionPane.showMessageDialog(null,"InValid User","MyProj",2);
dispose();
}
}
}
}
public static void main(String[] args)
{
new pandu7();
}
}
COMBINE------
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class pandu8 extends JFrame 
{
JLabel l1;
public pandu8(String x)
{
Container d=getContentPane();
l1=new JLabel(x);
l1.setFont(new Font("Courier",Font.BOLD,32));
d.add(l1);
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
setSize(500,300);
setVisible(true);
}
}

/*
JDBC: Java Database Connectivity:
1) To Display records of a table
Step:1 Create Database using Access and add record in table
Step:2 Create DSN(Data Source Name) ->Start ->Control Panel ->Adminstrative Tools -> Data Source -> Add -> Select proper Name from list -> Give DSN name and click on select button and browse the database file -> ok->ok
Step:3 Type the code and execute
*/
import java.sql.*;
class jdbc1
{
public static void main(String[] args)
{
try
{
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
Connection con=DriverManager.getConnection("Jdbc:Odbc:Jay","","");
Statement st=con.createStatement();
ResultSet rs=st.executeQuery("select * from stud");
while(rs.next())
{
System.out.println(rs.getInt("rollno")+" "+rs.getString("StudName")+" "+rs.getString("Addr")+" "+rs.getString("City"));
}
}catch(Exception ee){}
}
}

/*
JDBC: Java Database Connectivity:
1) To Display records of a table
Step:1 Create Database using Access and add record in table
Step:2 Create DSN(Data Source Name) ->Start ->Control Panel ->Adminstrative Tools -> Data Source -> Add -> Select proper Name from list -> Give DSN name and click on select button and browse the database file -> ok->ok
Step:3 Type the code and execute
*/
import java.sql.*;
class sahil
{
public static void main(String[] args)
{
try
{
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
Connection con=DriverManager.getConnection("Jdbc:Odbc:ABC","","");
Statement st=con.createStatement();
ResultSet rs=st.executeQuery("select * from Tanmay");
while(rs.next())
{
System.out.println(rs.getString("Subject")+" "+rs.getInt("Marks")+" "+rs.getString("Address")+" "+rs.getInt("Numbers"));
}
}catch(Exception ee){System.out.println(ee);}
}
}

/* To Store Record:
Step -1: Create database, table
Step -2: Create DSN
Step -3: Type the code and execute
*/
import java.util.*;
import java.sql.*;
public class jdbc2
{
public static void main(String[] args)
{
try
{
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
Connection con=DriverManager.getConnection("Jdbc:Odbc:Ram","","");
Statement st=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
ResultSet rs=st.executeQuery("select * from emp");
Scanner s=new Scanner(System.in);
String ans="";
do
{
System.out.println("Enter EmpNo");
int no=s.nextInt();
s.nextLine();
rs.moveToInsertRow();
rs.updateInt("Empno",no);

System.out.println("Enter EmpName");
String nm=s.nextLine();
rs.updateString("EmpName",nm);

System.out.println("Enter Emp Salary");
int sal=s.nextInt();
s.nextLine();
rs.updateInt("EmpSal",sal);

System.out.println("Enter Emp Join Date");
String jdate=s.nextLine();
java.sql.Date dt=java.sql.Date.valueOf(jdate);
rs.updateDate("EmpJDate",dt);

System.out.println("Enter Emp Id");
int id=s.nextInt();
s.nextLine();
rs.updateInt("Empid",id);
rs.insertRow();
System.out.println("Record saved add more yes no");
ans=s.nextLine();
}while(ans.equalsIgnoreCase("yes"));

}catch(Exception ee){}
	

}
}
&  ||
import java.util.*;
import java.sql.*;
public class jdbc3
{
public static void main(String[] args)
{
try
{
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
Connection con=DriverManager.getConnection("Jdbc:Odbc:Sahil","","");
Statement st=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
ResultSet rs=st.executeQuery("select * from Hotel1");
Scanner s=new Scanner(System.in);
String ans="";
do
{
System.out.println("Enter MenuNo");
int no=s.nextInt();
s.nextLine();
rs.moveToInsertRow();
rs.updateInt("MenuNo",no);

System.out.println("Enter MenuTitle");
String mt=s.nextLine();
rs.updateString("MenuTitle",mt);

System.out.println("Enter MenuPrice");
int mp=s.nextInt();
s.nextLine();
rs.updateInt("MenuPrice",mp);

System.out.println("Enter category");
String cat=s.nextLine();
rs.updateString("category",cat);

rs.insertRow();
System.out.println("Record saved add more yes no");
ans=s.nextLine();
}while(ans.equalsIgnoreCase("yes"));

}catch(Exception ee){}
}
}

//Stud Type The Code And Execute

import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import javax.swing.*;
public class jdbc4 extends JFrame implements ActionListener
{
JLabel l1,l2,l3,l4;
JTextField t1,t2;
JRadioButton r1,r2;
JComboBox c1;
JButton b1,b2,b3,b4,b5,b6;
ResultSet rs;
public jdbc4()
{
Container d=getContentPane();
d.setLayout(null);
try
{
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
Connection cn=DriverManager.getConnection("Jdbc:Odbc:mydsn","","");
Statement st=cn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
rs=st.executeQuery("select * from stud");
}catch(Exception ee){}
l1=new JLabel("RollNo");
l2=new JLabel("Stud Name");
l3=new JLabel("Gender");
l4=new JLabel("Stud Class");
t1=new JTextField(20);
t2=new JTextField(20);
r1=new JRadioButton("Male");
r2=new JRadioButton("Female");
ButtonGroup bg=new ButtonGroup();
bg.add(r1);
bg.add(r2);
String x[]={"X","XII","FYBsc","SYBsc","TyBsc","Msc","MCom"};
c1=new JComboBox(x);
b1=new JButton("Add");
b2=new JButton("Save");
b3=new JButton("Upd");
b4=new JButton("Sear");
b5=new JButton("Del");
b6=new JButton("Exit");
Font f=new Font("Courier",Font.BOLD,20);
l1.setFont(f);
l2.setFont(f);
l3.setFont(f);
l4.setFont(f);
t1.setFont(f);
t2.setFont(f);
r1.setFont(f);
r2.setFont(f);
c1.setFont(f);
b1.setFont(f);
b2.setFont(f);
b3.setFont(f);
b4.setFont(f);
b5.setFont(f);
b6.setFont(f);
l1.setBounds(200,100,200,30);
t1.setBounds(400,100,150,30);

l2.setBounds(200,150,200,30);
t2.setBounds(400,150,350,30);

l3.setBounds(200,200,200,30);
r1.setBounds(400,200,125,30);
r2.setBounds(550,200,150,30);

l4.setBounds(200,250,200,30);
c1.setBounds(400,250,200,30);

b1.setBounds(50,450,100,30);
b2.setBounds(170,450,100,30);
b3.setBounds(290,450,100,30);
b4.setBounds(410,450,100,30);
b5.setBounds(530,450,100,30);
b6.setBounds(650,450,100,30);

b1.addActionListener(this);
b2.addActionListener(this);
b3.addActionListener(this);
b4.addActionListener(this);
b5.addActionListener(this);
b6.addActionListener(this);
d.add(l1);
d.add(l2);
d.add(l3);
d.add(l4);
d.add(t1);
d.add(t2);
d.add(r1);
d.add(r2);
d.add(c1);
d.add(b1);
d.add(b2);
d.add(b3);
d.add(b4);
d.add(b5);
d.add(b6);
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
setSize(800,600);
setVisible(true);
}
public void actionPerformed(ActionEvent tt)
{
try
{
if(tt.getSource()==b1)
{
t1.setText("");
t2.setText("");
}
else
if(tt.getSource()==b2)
{
rs.moveToInsertRow();
rs.updateInt("Rollno",Integer.parseInt(t1.getText().trim()));
rs.updateString("StudName",t2.getText().trim());
if(r1.isSelected())
rs.updateString("Gender","Male");
else
rs.updateString("Gender","Female");
rs.updateString("StudClass",(String) c1.getSelectedItem());
rs.insertRow();
JOptionPane.showMessageDialog(null,"Saved","MyProg",2);
}
else
if(tt.getSource()==b3)
{
rs.updateInt("Rollno",Integer.parseInt(t1.getText().trim()));
rs.updateString("StudName",t2.getText().trim());
if(r1.isSelected())
rs.updateString("Gender","Male");
else
rs.updateString("Gender","Female");
rs.updateString("StudClass",(String) c1.getSelectedItem());
rs.updateRow();
JOptionPane.showMessageDialog(null,"Updated","MyProg",2);
}
else
if(tt.getSource()==b4)
{
int x=Integer.parseInt(JOptionPane.showInputDialog("Enter Roll to Search"));
boolean flag=false;
try
{
rs.first();
do
{
if(rs.getInt("rollno")==x)
{
flag=true;
t1.setText(x+"");
t2.setText(rs.getString("StudName"));
if(rs.getString("Gender").equals("Male"))
r1.setSelected(true);
else
r2.setSelected(true);
c1.setSelectedItem(rs.getString("StudClass"));
break;
}
}while(rs.next());
}catch(Exception fgdg){}
if(flag==false)
JOptionPane.showMessageDialog(null,"Not Found","MyProg",2);
}
else
if(tt.getSource()==b5)
{
rs.deleteRow();
JOptionPane.showMessageDialog(null,"Record Deleted","MyProg",2);
}
else
if(tt.getSource()==b6)
{
dispose();
}
}catch(Exception ee){}
}
public static void main(String[] args)
{
jdbc4 p=new jdbc4();
}
}
			